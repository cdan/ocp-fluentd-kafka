#---system config---
<system>
  log_level warn
  uppress_config_dump
</system>

#---source config---
<source>
  @type tail
  path /var/log/messages
  pos_file /var/log/messages.log.pos
  tag OSE-log.system.*
  format multiline
  format_firstline /^[A-Z][a-z]{2}\s+[0-3]?[0-9]\s+[0-2][0-9]:[0-5][0-9]:[0-6][0-9]\s/
  format1 /^(?<time>\S+\s+\S+\s+\S+)\s+(?<log>.*)$/
  time_format %b %d %H:%M:%S
  read_from_head true
  keep_time_key true
</source>
<source>
  @type tail
  path /var/lib/origin/log/OSE-master,/var/lib/origin/log/OSE-node,/var/lib/origin/log/OSE-docker,/var/lib/origin/log/OSE-etcd
  pos_file /var/lib/origin/log/OSE-component.log.pos
  tag OSE-log.component.*
  format multiline
  format_firstline /^[A-Z][a-z]{2}\s+[0-3]?[0-9]\s+[0-2][0-9]:[0-5][0-9]:[0-6][0-9]\s/
  format1 /^(?<time>\S+\s+\S+\s+\S+)\s+(?<log>.*)$/
  time_format %b %d %H:%M:%S
  read_from_head true
  keep_time_key true
</source>
<source>
  @type tail
  path /var/log/containers/*.log
  pos_file /var/log/containers.log.pos
  time_format %Y-%m-%dT%H:%M:%S
  tag kubernetes.*
  format json
  keep_time_key true
  read_from_head true
  exclude_path []
</source>

#---filter---
<filter OSE-log.system.var.log.**>
  type record_transformer
  enable_ruby
  <record>
     hostname  ${(begin; File.open('/etc/docker-hostname') { |f| f.readline }.rstrip; rescue; end)}
     file_name  ${tag_suffix[4]}
     log_type  OSE-system
     log_level  info
     message  ${record['time']} ${record['log']}
     utctime  ${ Time.new(time.year, time.month, time.day, time.hour, time.min, time.sec, "+08:00").utc }
  </record>
  remove_keys  log
</filter>
<filter OSE-log.component.**>
  type record_transformer
  enable_ruby
  <record>
     hostname  ${(begin; File.open('/etc/docker-hostname') { |f| f.readline }.rstrip; rescue; end)}
     file_name ${tag_suffix[6]}
     log_type  ${tag_suffix[6]}
     log_level  info
     message  ${record['time']} ${record['log']}
     utctime  ${ Time.new(time.year, time.month, time.day, time.hour, time.min, time.sec, "+08:00").utc }
  </record>
  remove_keys  log
</filter>
<filter OSE-log.**>
  type record_transformer
  enable_ruby
  <record>
     time  ${ (Time.parse(utctime) > Time.now) ? (Time.new((Time.parse(utctime).year - 1), Time.parse(utctime).month, Time.parse(utctime).day, Time.parse(utctime).hour, Time.parse(utctime).min, Time.parse(utctime).sec, Time.parse(utctime).utc_offset).localtime("+08:00").to_datetime.rfc3339(6)) : Time.parse(utctime).localtime("+08:00").to_datetime.rfc3339(6) }
  </record>
  remove_keys  utctime
</filter>

<filter kubernetes.**>
  type kubernetes_metadata
  kubernetes_url "#{ENV['K8S_HOST_URL']}"
  bearer_token_file /var/run/secrets/kubernetes.io/serviceaccount/token
  ca_file /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  include_namespace_id false
</filter>

<filter kubernetes.**>
  type record_transformer
  enable_ruby
  <record>
     exist_business ${record['kubernetes']['labels']['business'] rescue nil}
  </record>
</filter>

<match kubernetes.**>
  @type rewrite_tag_filter
  rewriterule1 exist_business  ^(.+)$  business.${tag}
  rewriterule2 exist_business  !^(.+)$ non-business.${tag}
</match>
<filter non-business.**>
  type record_transformer
  enable_ruby
  <record>
     kubernetes_container_name  ${record['kubernetes']['container_name']}
  </record>
  remove_keys exist_business
</filter>
<match non-business.**>
  @type rewrite_tag_filter
  rewriterule1 kubernetes_container_name  ^(registry|registry-console)$  container.non-agent.OSE-registry.${tag}
  rewriterule2 kubernetes_container_name  ^(fluentd)$  container.non-agent.OSE-fluentd.${tag}
  rewriterule3 kubernetes_container_name  ^(router|svcrouter)$  container.non-agent.router.${tag}
  rewriterule4 kubernetes_container_name  ^(discovery-agent|stats-agent)$  container.non-agent.OSE-zabbixagent.${tag}
  rewriterule5 kubernetes_container_name  ^(.*)$  container.non-agent.system-other.${tag}
</match>

<filter container.non-agent.OSE-**>
  type record_transformer
  enable_ruby
  <record>
     time ${time.utc.localtime("+08:00").to_datetime.rfc3339(6)}
     hostname  ${(record['kubernetes']['host'] rescue nil) || File.open('/etc/docker-hostname') { |f| f.readline }.rstrip}
     file_name ${tag_suffix[8]}
     app_name  ${record['kubernetes']['labels']['deploymentconfig'] rescue nil}
     message  ${(message rescue nil) || log}
     container_id  ${record['docker']['container_id'] rescue nil}
     pod_name  ${record['kubernetes']['pod_name'] rescue nil}
     namespace  ${record['kubernetes']['namespace_name'] rescue nil}
     log_level  ${record['stream'] == 'stdout' ? 'info' : 'error'}
     log_type  ${tag_parts[2]}
  </record>
  remove_keys log,stream,kubernetes,docker,kubernetes_container_name
</filter>

<filter container.non-agent.router.**>
  type record_transformer
  enable_ruby
  <record>
     hostname  ${(record['kubernetes']['host'] rescue nil) || File.open('/etc/docker-hostname') { |f| f.readline }.rstrip}
     router_group  ${record['kubernetes']['labels']['routergroup'] rescue nil}
     app_name  ${record['kubernetes']['labels']['deploymentconfig'] rescue nil}
     file_name ${tag_suffix[8]}
     container_id  ${record['docker']['container_id'] rescue nil}
     pod_name  ${record['kubernetes']['pod_name'] rescue nil}
     namespace  ${record['kubernetes']['namespace_name'] rescue nil}
     message  ${(message rescue nil) || log}
     log_level ${record['stream'] == 'stdout' ? 'info' : 'error'}
     log_type  router-access
  </record>
  remove_keys time,log,stream,kubernetes,docker,kubernetes_container_name
</filter>
#deployer/builder pod
<filter container.non-agent.system-other.**>
  type record_transformer
  enable_ruby
  <record>
     time ${time.utc.localtime("+08:00").to_datetime.rfc3339(6)}
     hostname  ${(record['kubernetes']['host'] rescue nil) || File.open('/etc/docker-hostname') { |f| f.readline }.rstrip}
     file_name ${tag_suffix[8]}
     app_name  ${record['kubernetes']['container_name'] rescue nil}
     message  ${(message rescue nil) || log}
     container_id  ${record['docker']['container_id'] rescue nil}
     pod_name  ${record['kubernetes']['pod_name'] rescue nil}
     namespace  ${record['kubernetes']['namespace_name'] rescue nil}
     log_level  ${record['stream'] == 'stdout' ? 'info' : 'error'}
     log_type  OSE-other
  </record>
  remove_keys log,stream,kubernetes,docker,kubernetes_container_name
</filter>

<match business.**>
  @type rewrite_tag_filter
  rewriterule1 log  ^(~\^&),.*$  application.${tag}
  rewriterule2 log  ^\[ZBX-[A-Z]{3,4}-DEBUG\].*$  container.agent.zabbixagent.${tag}
  rewriterule3 log  ^(.*)$  container.agent.default.${tag}
</match>
<filter container.agent.zabbixagent.**>
  type record_transformer
  enable_ruby
  <record>
     time ${time.utc.localtime("+08:00").to_datetime.rfc3339(6)}
     hostname  ${(record['kubernetes']['host'] rescue nil) || File.open('/etc/docker-hostname') { |f| f.readline }.rstrip}
     file_name ${tag_suffix[8]}
     app_name  ${record['kubernetes']['labels']['deploymentconfig'] rescue nil}
     message  ${(message rescue nil) || log}
     container_id  ${record['docker']['container_id'] rescue nil}
     pod_name  ${record['kubernetes']['pod_name'] rescue nil}
     namespace  ${record['kubernetes']['namespace_name'] rescue nil}
     log_level  ${record['stream'] == 'stdout' ? 'info' : 'error'}
     log_type  OSE-zabbixagent
  </record>
  remove_keys log,stream,kubernetes,docker,exist_business
</filter>
<filter container.agent.default.**>
  type record_transformer
  enable_ruby
  <record>
     time ${time.utc.localtime("+08:00").to_datetime.rfc3339(6)}
     hostname  ${(record['kubernetes']['host'] rescue nil) || File.open('/etc/docker-hostname') { |f| f.readline }.rstrip}
     business ${record['kubernetes']['labels']['business'] rescue nil}
     module ${record['kubernetes']['labels']['module'] rescue nil}
     app_name  ${record['kubernetes']['labels']['deploymentconfig'] rescue nil}
     version  ${record['kubernetes']['labels']['deploymentconfig'].split('-v-').fetch(1, nil) rescue nil}
     container_id  ${record['docker']['container_id'] rescue nil}
     pod_name  ${record['kubernetes']['pod_name'] rescue nil}
     namespace  ${record['kubernetes']['namespace_name'] rescue nil}
     file_name ${tag_suffix[8]}
     log_type  business-stdout
     log_level  ${record['stream'] == 'stdout' ? 'info' : 'error'}
     message  ${record['log']  rescue nil}
  </record>
  remove_keys time,log,stream,kubernetes,docker
</filter>
<filter application.**>
  type record_transformer
  enable_ruby
  <record>
     log_type  ${record['log'].split(',').fetch(2, nil) rescue nil}
  </record>
  remove_keys exist_business
</filter>

<match application.**>
  @type rewrite_tag_filter
  rewriterule1 log_type  ^(business-running)$  container.agent.business-running.${tag}
  rewriterule2 log_type  ^(OSE-logagent)$  container.agent.logagent.${tag}
  rewriterule3 log_type  ^(.*)$  container.agent.business-applog.${tag}
</match>
<filter container.agent.business-**>
  type record_transformer
  enable_ruby
  <record>
     hostname  ${(record['kubernetes']['host'] rescue nil) || File.open('/etc/docker-hostname') { |f| f.readline }.rstrip}
     business ${record['kubernetes']['labels']['business'] rescue nil}
     module ${record['kubernetes']['labels']['module'] rescue nil}
     app_name  ${record['kubernetes']['labels']['deploymentconfig'] rescue nil}
     version  ${record['kubernetes']['labels']['deploymentconfig'].split('-v-').fetch(1, nil) rescue nil}
     container_id  ${record['docker']['container_id'] rescue nil}
     pod_name  ${record['kubernetes']['pod_name'] rescue nil}
     namespace  ${record['kubernetes']['namespace_name'] rescue nil}
     file_name  ${record['log'].split(',').fetch(1, nil) rescue nil}
     message  ${record['log'].split(',').last(record['log'].split(',').size - 3).join(',') rescue nil}
  </record>
  remove_keys time,log,stream,kubernetes,docker
</filter>
<filter container.agent.logagent.**>
  type record_transformer
  enable_ruby
  <record>
     time ${time.utc.localtime("+08:00").to_datetime.rfc3339(6)}
     hostname  ${(record['kubernetes']['host'] rescue nil) || File.open('/etc/docker-hostname') { |f| f.readline }.rstrip}
     file_name ${record['log'].split(',').fetch(1, nil) rescue nil}
     app_name  ${record['kubernetes']['labels']['deploymentconfig'] rescue nil}
     message  ${record['log'].split(',').last(record['log'].split(',').size - 3).join(',') rescue nil}
     container_id  ${record['docker']['container_id'] rescue nil}
     pod_name  ${record['kubernetes']['pod_name'] rescue nil}
     namespace  ${record['kubernetes']['namespace_name'] rescue nil}
     log_level  ${record['stream'] == 'stdout' ? 'info' : 'error'}
  </record>
  remove_keys log,stream,kubernetes,docker
</filter>

#---add kafka partition key---
<filter OSE-log.**>
  type record_transformer
  enable_ruby
  <record>
     partition_key ${record["hostname"]}-${record["file_name"]}
  </record>
</filter>
<filter container.**>
  type record_transformer
  enable_ruby
  <record>
     partition_key ${record["pod_name"]}-${record["file_name"]}
  </record>
</filter>

#---output---
<match OSE-log.**  container.non-agent.OSE-** container.non-agent.system-other.**  container.agent.logagent.** container.agent.zabbixagent.**>
   @type kafka
   brokers  10.221.130.221:9092
   default_topic  paas_oselog
   output_data_type json
</match>
<match container.non-agent.router.**>
   @type kafka
   brokers  10.221.130.221:9092
   default_topic  paas_routerlog
   output_data_type json
</match>
<match container.agent.business-running.**>
   @type kafka
   brokers  10.221.130.221:9092
   default_topic  paas_running
   output_data_type json
</match>
<match container.agent.business-applog.** container.agent.default.**>
   @type kafka
   brokers  10.221.130.221:9092
   default_topic  paas_applog
   output_data_type json
</match>

<match **>
   @type file
   path /var/log/fluent/all_log
</match>
